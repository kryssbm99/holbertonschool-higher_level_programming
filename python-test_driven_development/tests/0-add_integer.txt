===========================
How to Use 0-add_integer.py
===========================

This module defines the function ``add_integer(a, b=98)``, which adds two numbers together.

Usage
=====

The function ``add_integer(...)`` takes two arguments, ``a`` and ``b``, and returns their sum as an integer. If only one argument is provided, the function uses a default value of 98 for the second argument.

Basic Examples
==============

Here are some basic examples of how to use the ``add_integer`` function:

Adding two integers:

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

Adding an integer and a negative integer:

::

    >>> add_integer(2, -3)
    -1

Adding two floating-point numbers (note that they are cast to integers before addition):

::

    >>> add_integer(2.0, 3.0)
    5

Floats are cast to integers, so fractional parts are discarded:

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

Combining an integer and a float:

::

    >>> add_integer(2.3, -3)
    -1

Using the default value for the second argument:

::

    >>> add_integer(2)
    100

Error Handling
==============

The ``add_integer`` function expects both arguments to be either integers or floats. If either argument is not a number, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are invalid, the error message will only refer to the first argument:

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

Special Cases
=============

The function will also raise errors for special float values such as infinity and NaN:

Infinity:

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

NaN (Not a Number):

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
